#!/usr/bin/env python
#
# Durian Debian Deployer
# Originally Developed by Mohammad Razavi <mrazavi64 at gmail dot com>
#

"""\
Given a list of apt packages, recursively find all the required
dependency to install them. "apt-cache depends --recurse" will be used
to find the dependencies.
"""

import os, sys, re, subprocess
from optparse import OptionParser

__version__ = "1.0.0"
__minimum_durian_version__ = "1.0.0"
__description__ = "recursively list dependency of apt packages"

def get_depends(package_names, follow):
    # package_name_rx = re.compile(r"^[a-z][a-z0-9.+-]+(:\w+)?$")
    package_name_rx = re.compile(r"^[^\s<>]+(:\w+)?$")

    depend_name = lambda x: \
                  {"PreDepends": "pre-depends", "Depends": "depends", \
                   "Recommends": "recommends", "Suggests": "suggests", \
                   "Conflicts": "conflicts", "Breaks": "breaks", \
                   "Replaces": "replaces", "Enhances": "enhances"}[x]

    negative = lambda x: "--no-{0}".format(x)

    follow = map(depend_name, follow)

    unfollow = {"pre-depends", "depends", "recommends", "suggests", \
                "conflicts", "breaks", "replaces", "enhances"} - set(follow)

    args = map(negative, unfollow)
    args += ["--recurse"]

    p = subprocess.Popen(["apt-cache", "depends"] + args + package_names, \
                         stdout = subprocess.PIPE, stdin = subprocess.PIPE, \
                         stderr = subprocess.PIPE)
    stdout, stderr = p.communicate()

    result = [i.strip() for i in stdout.split("\n")]
    result = filter(package_name_rx.match, result)

    return set(result)

if __name__ == "__main__":
    parser = OptionParser()

    parser.add_option("-f", "--follow", dest="follow",
                      type = "string", \
                      default = "PreDepends,Depends,Recommends",
                      help = "A comma-separated list of DEPENDS types to " \
                      "follow recursively.", metavar = "DEPENDS")
    parser.add_option("-a", "--all-archs", dest = "all_archs", \
                      action = "store_true", default = False, \
                      help = "Do not suppress listing the packages of other " \
                      "architectures")
    parser.add_option("-v", "--version", dest = "version", \
                      action = "store_true", default = False, \
                      help = "Print plugin version and exit")

    parser.set_description(__doc__)
    parser.set_usage("depends [-v|--version] [-h|--help] " \
                     "[-f|--follow=<depends>] <packages>")

    OPTIONS, ARGS = parser.parse_args()

    if OPTIONS.version:
        sys.stdout.write("desctiption: {0}\n".format(__description__))
        sys.stdout.write("version: {0}\n".format(__version__))
        sys.stdout.write("minimum durian version: {0}\n" \
                         .format(__minimum_durian_version__))
        exit(0)

    if not ARGS:
        sys.stderr.write("You have to specify apt packages.\n")
        exit(1)

    follow = OPTIONS.follow.split(",")

    result = get_depends(ARGS, follow)

    if not OPTIONS.all_archs:
        result = set(result)
        arch_filter = lambda x: ":" not in x or \
                                x.split(":", 1)[0] not in result
        result = filter(arch_filter, result)

    if result:
        sys.stdout.write("{0}\n".format("\n".join(sorted(result))))
